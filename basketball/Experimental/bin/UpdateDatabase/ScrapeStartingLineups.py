#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sat Feb 12 13:46:56 2022@author: robertmegnia"""from bs4 import BeautifulSoup as BSimport requestsimport pandas as pdimport osfrom datetime import datetimeimport unidecodeimport numpy as npfrom os.path import existsbasedir = os.path.dirname(os.path.abspath(__file__))datadir= f'{basedir}/../data'database=pd.read_csv(f'{datadir}/Database/PlayerDatabase.csv')database.sort_values(by='game_date',inplace=True)#%%for game_date in database.game_date.unique():    if exists(f'{datadir}/Database/startingLineups/{game_date}'):        continue    if game_date<'2015-03-23':        continue    print(game_date)    soup=BS(requests.get(f'https://rotogrinders.com/lineups/nba?date={game_date}&site=draftkings').content,'html.parser')    players=[]    positions=[]    salaries=[]    starter=[]    ownerships=[]    away_teams=[]    home_teams=[]    away_ou=[]    home_ou=[]    away_proj_pts=[]    home_proj_pts=[]    teams=[]    opp=[]    proj_pts=[]    ou=[]    spread=[]    for game in soup.find_all(attrs={'data-role':'lineup-card'}):        away_team=game.find_all(attrs={'class':'blk crd lineup'})[0].find_all(attrs={'class':'shrt'})[0].text        home_team=game.find_all(attrs={'class':'blk crd lineup'})[0].find_all(attrs={'class':'shrt'})[1].text        away_teams.append(away_team)        home_teams.append(home_team)    odds=soup.find_all(attrs={'class':'ou'})    for game_odds in odds:        try:            away_proj=float(game_odds.find_all(attrs={'href':"/nba/odds"})[0].text)            home_proj=float(game_odds.find_all(attrs={'href':"/nba/odds"})[1].text)        except IndexError:            away_proj=np.nan            home_proj=np.nan        away_proj_pts.append(away_proj)        home_proj_pts.append(home_proj)        away_ou.append(away_proj+home_proj)        home_ou.append(away_proj+home_proj)    for index,tm in enumerate(away_teams):        away_team_players=soup.find_all(attrs={'blk away-team'})[index]        n=0        for player in away_team_players.find_all(attrs={'class':'player'}):            teams.append(tm)            opp.append(home_teams[index])            try:                proj_pts.append(away_proj_pts[index])                spread.append((away_proj_pts[index]-home_proj_pts[index])*-1)                ou.append(away_ou[index])            except IndexError:                proj_pts.append(np.nan)                spread.append(np.nan)                ou.append(np.nan)            name=player.find_all(attrs={'class':'pname'})[0].text.split('\n')[1]            position=player.get('data-pos')            try:                salary=float(player.find_all(attrs={'class':'salary'})[0].text.split('$')[1].split('K')[0])*1000            except IndexError:                salary=np.nan                        try:                ownership=float(player.find_all(attrs={'class':'pown'})[0].get('data-pown').split('%')[0])            except ValueError:                ownership=0            players.append(name)            positions.append(position)            salaries.append(salary)            ownerships.append(ownership)            if n>4:                starter.append(True)            else:                starter.append(False)            n+=1    for index,tm in enumerate(home_teams):        home_team_players=soup.find_all(attrs={'blk home-team'})[index]        n=0        for player in home_team_players.find_all(attrs={'class':'player'}):            teams.append(tm)            opp.append(away_teams[index])            try:                proj_pts.append(home_proj_pts[index])                spread.append((home_proj_pts[index]-away_proj_pts[index])*-1)                ou.append(home_ou[index])            except IndexError:                proj_pts.append(np.nan)                spread.append(np.nan)                ou.append(np.nan)            name=player.find_all(attrs={'class':'pname'})[0].text.split('\n')[1]            position=player.get('data-pos')            try:                salary=float(player.find_all(attrs={'class':'salary'})[0].text.split('$')[1].split('K')[0])*1000            except IndexError:                salary=np.nan            try:                ownership=float(player.find_all(attrs={'class':'pown'})[0].get('data-pown').split('%')[0])            except ValueError:                ownership=0            players.append(name)            positions.append(position)            salaries.append(salary)            ownerships.append(ownership)            if n>4:                starter.append(True)            else:                starter.append(False)            n+=1    df=pd.DataFrame({'RotoName':players,                     'RotoPosition':positions,                     'Salary':salaries,                     'ownership_proj':ownerships,                     'team':teams,                     'opp':'opp',                     'proj_team_score':proj_pts,                     'total_line':ou,                     'starter':starter})    if len(df)==0:        continue    #     # Remove ending dots and hyphens    # df['RotoName']=df.RotoName.apply(lambda x: ''.join([c for c in x if c.isalnum()]))    # df['RotoName']=df.RotoName.apply(lambda x: x.lower())    # df['RotoName']=df.RotoName.apply(lambda x: unidecode.unidecode(x))    df['game_date']=game_date    if not exists(f'{datadir}/Database/startingLineups/{game_date}'):        os.mkdir(f'{datadir}/Database/startingLineups/{game_date}')    df.to_csv(f'{datadir}/Database/startingLineups/{game_date}/{game_date}_Lineups.csv',index=False)                                