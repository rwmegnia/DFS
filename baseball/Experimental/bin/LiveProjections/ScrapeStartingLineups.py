#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sat Feb 12 13:46:56 2022@author: robertmegnia"""from bs4 import BeautifulSoup as BSimport requestsimport pandas as pdimport osfrom datetime import datetimeimport unidecodeimport numpy as npimport sysbasedir = os.path.dirname(os.path.abspath(__file__))datadir = f"{basedir}/../../data"def scrapeStartingLineups():    game_date = datetime.now().strftime("%Y-%m-%d")    soup = BS(        requests.get(f"https://rotogrinders.com/lineups/mlb").content,        "html.parser",    )    players = []    positions = []    projections = []    salaries = []    handedness = []    opp_handedness = []    ownerships = []    away_teams = []    home_teams = []    player_away_teams = []    player_home_teams = []    away_ou = []    home_ou = []    away_proj_runs = []    home_proj_runs = []    away_moneyline = []    home_moneyline = []    order = []    teams = []    proj_runs = []    total_runs = []    opps = []    moneyline = []    game_times = []    away_times = []    home_times = []    for game in soup.find_all(attrs={"data-role": "lineup-card"}):        team_names = game.find_all(attrs={"class": "shrt"})        away_team = (            game.find_all(attrs={"class": "blk crd lineup"})[0]            .find_all(attrs={"class": "shrt"})[0]            .text        )        home_team = (            game.find_all(attrs={"class": "blk crd lineup"})[0]            .find_all(attrs={"class": "shrt"})[1]            .text        )        away_teams.append(away_team)        home_teams.append(home_team)        away_times.append("".join(game.time.text.split(" ")[0:2]))        home_times.append("".join(game.time.text.split(" ")[0:2]))    for index, tm in enumerate(away_teams):        away_team_players = soup.find_all(attrs={"blk away-team"})[index]        # Load Away Pticher        away_pitcher = away_team_players.find_all(            attrs={"class": "pitcher players"}        )[0]        players.append(            away_pitcher.find_all(attrs={"class": "player-popup"})[0].text        )        positions.append("P")        try:            salaries.append(                float(                    away_pitcher.find_all(attrs={"class": "salary"})[0]                    .text.split("$")[1]                    .split("K")[0]                )                * 1000            )        except:            salaries.append(np.nan)        try:            ownerships.append(                float(                    away_pitcher.find_all(attrs={"class": "pown"})[0]                    .get("data-pown")                    .split("%")[0]                )            )        except:            ownerships.append(np.nan)        projections.append(            float(                away_pitcher.find_all(attrs={"class": "fpts"})[0].get(                    "data-fpts"                )            )        )        hand = (            away_pitcher.find_all(attrs={"class": "stats"})[0]            .find_all(attrs={"class": "stats"})[0]            .text        )        hand = "".join(c for c in hand if c.isalnum())        handedness.append(hand)        opp_handedness.append(hand)        order.append(9)        teams.append(tm)        opps.append(home_teams[index])        game_times.append(home_times[index])        for player in away_team_players.find_all(attrs={"class": "player"}):            teams.append(tm)            opps.append(home_teams[index])            game_times.append(home_times[index])            name = player.find_all(attrs={"class": "pname"})[0].text.split(                "\n"            )[1]            position = player.get("data-pos")            try:                salary = (                    float(                        player.find_all(attrs={"class": "salary"})[0]                        .text.split("$")[1]                        .split("K")[0]                    )                    * 1000                )                ownership = float(                    player.find_all(attrs={"class": "pown"})[0]                    .get("data-pown")                    .split("%")[0]                )                projection = float(                    player.find_all(attrs={"class": "fpts"})[0].get("data-fpts")                )                hand = (                    player.find_all(attrs={"class": "stats"})[0]                    .find_all(attrs={"class": "stats"})[0]                    .get("data-hand")                )                opp_hand = (                    player.find_all(attrs={"class": "stats"})[0]                    .find_all(attrs={"class": "stats"})[0]                    .get("data-opp-pitcher-hand")                )                order.append(                    float(player.find_all(attrs={"class": "order"})[0].text)                )            except:                salary =  np.nan                ownership = np.nan                projection = np.nan                hand = np.nan                opp_hand = np.nan                order.append(np.nan)            players.append(name)            positions.append(position)            salaries.append(salary)            ownerships.append(ownership)            projections.append(projection)            handedness.append(hand)            opp_handedness.append(opp_hand)    for index, ht in enumerate(home_teams):        home_team_players = soup.find_all(attrs={"blk home-team"})[index]        home_pitcher = home_team_players.find_all(            attrs={"class": "pitcher players"}        )[0]        players.append(            home_pitcher.find_all(attrs={"class": "player-popup"})[0].text        )        positions.append("P")        try:            salary = (                float(                    player.find_all(attrs={"class": "salary"})[0]                    .text.split("$")[1]                    .split("K")[0]                )                * 1000            )        except:            salary=np.nan            ownership=np.nan        salaries.append(salary)        try:            ownerships.append(                float(                    home_pitcher.find_all(attrs={"class": "pown"})[0]                    .get("data-pown")                    .split("%")[0]                )            )        except:            ownerships.append(np.nan)        projections.append(            float(                home_pitcher.find_all(attrs={"class": "fpts"})[0].get(                    "data-fpts"                )            )        )        hand = (            home_pitcher.find_all(attrs={"class": "stats"})[0]            .find_all(attrs={"class": "stats"})[0]            .text        )        hand = "".join(c for c in hand if c.isalnum())        handedness.append(hand)        opp_handedness.append(hand)        order.append(9)        teams.append(ht)        opps.append(away_teams[index])        game_times.append(away_times[index])        for player in home_team_players.find_all(attrs={"class": "player"}):            teams.append(ht)            opps.append(away_teams[index])            game_times.append(away_times[index])            name = player.find_all(attrs={"class": "pname"})[0].text.split(                "\n"            )[1]            position = player.get("data-pos")            try:                salary = (                    float(                        player.find_all(attrs={"class": "salary"})[0]                        .text.split("$")[1]                        .split("K")[0]                    )                    * 1000                )                ownership = float(                    player.find_all(attrs={"class": "pown"})[0]                    .get("data-pown")                    .split("%")[0]                )            except:                ownership = np.nan                salary = np.nan            try:                projection = float(                    player.find_all(attrs={"class": "fpts"})[0].get("data-fpts")                )                hand = (                    player.find_all(attrs={"class": "stats"})[0]                    .find_all(attrs={"class": "stats"})[0]                    .get("data-hand")                )                opp_hand = (                    player.find_all(attrs={"class": "stats"})[0]                    .find_all(attrs={"class": "stats"})[0]                    .get("data-opp-pitcher-hand")                )            except:                projection = np.nan                hand = np.nan                opp_hand = np.nan            order.append(                float(player.find_all(attrs={"class": "order"})[0].text)            )            players.append(name)            positions.append(position)            salaries.append(salary)            ownerships.append(ownership)            projections.append(projection)            handedness.append(hand)            opp_handedness.append(opp_hand)    df = pd.DataFrame(        {            "RotoName": players,            "RotoPosition": positions,            "Salary": salaries,            "ownership_proj": ownerships,            "RG_projection": projections,            "team": teams,            "opp": opps,            "handedness": handedness,            "opp_pitcher_hand": opp_handedness,            "order": order,            "game_time": game_times,        }    )    df = df[df.RotoName != " "]    df.RotoName.replace('                        Bryce Johnson','Bryce Johnson',inplace=True)    #     # Remove ending dots and hyphens    ## REFORMAT PLAYER NAMES BY REMOVING NON-ALPHA-NUMERICS    df["first_name"] = df.RotoName.apply(lambda x: x.split(" ")[0])    df["last_name"] = df.RotoName.apply(lambda x: " ".join(x.split(" ")[1::]))    # Remove non-alpha numeric characters from first/last names    df["first_name"] = df.first_name.apply(        lambda x: "".join(c for c in x if c.isalnum())    )    df["last_name"] = df.last_name.apply(        lambda x: "".join(c for c in x if c.isalnum())    )    # Recreate full_name to fit format "Firstname Lastname" with no accents    df["full_name"] = df.apply(        lambda x: " ".join([x.first_name, x.last_name]), axis=1    )    df["full_name"] = df.full_name.apply(lambda x: x.lower())    df.drop(["first_name", "last_name"], axis=1, inplace=True)    df["full_name"] = df.full_name.apply(        lambda x: x.split(" ")[0][0].upper()        + x.split(" ")[0][1::]        + " "        + x.split(" ")[-1][0].upper()        + x.split(" ")[-1][1::] if len(x.split(" ")[0])>0 else np.nan    )    df=df[df.full_name.isna()==False]    df["full_name"] = df.full_name.apply(lambda x: unidecode.unidecode(x))    # Create Column to match with RotoGrinders    df["RotoName"] = df.full_name.apply(        lambda x: x.lower().split(" ")[0][0:4] + x.lower().split(" ")[1][0:5]    )    df.RotoName.replace(        {"vinccapra": "vinncapra", "natelowe": "nathlowe"}, inplace=True    )    df["game_date"] = game_date    df.team.replace(        {            "SDP": "SD",            "KCR": "KC",            "SFG": "SF",            "TBR": "TB",            "WAS": "WSH",            "CHW": "CWS",        },        inplace=True,    )    df.opp.replace(        {            "SDP": "SD",            "KCR": "KC",            "SFG": "SF",            "TBR": "TB",            "WAS": "WSH",            "CHW": "CWS",        },        inplace=True,    )    df.to_csv(        f"{datadir}/StartingLineupsRotoGrinders/{game_date}_StartingLineups.csv",        index=False,    )    return df