import pandas as pdimport nfl_data_py as nflfrom sklearn.ensemble import RandomForestClassifier as RFfrom sklearn.ensemble import RandomForestRegressor as RFRfrom sklearn.dummy import DummyClassifier as DCfrom sklearn.model_selection import train_test_splitimport pickleimport os from datetime import datetimeimport numpy as npbasedir = os.path.dirname(os.path.abspath(__file__))model_dir=f'{basedir}/ml_models'# Builds Necessary Models for game simulationpbp = nfl.import_pbp_data(range(2016,2022))#%%pbp['time']=pbp.time.apply(lambda x: datetime.strptime(x,'%M:%S') if x is not None else x)pbp['end_time']=pbp.time.shift(-1)pbp['elapsed_time']=(pbp.time-pbp.end_time).apply(lambda x: x.total_seconds())#%%df=pbpfield_goals=df[df.field_goal_attempt==1]## Build Generic Dummy Modelsdummy_model=RF().fit(field_goals[['kick_distance']],field_goals.field_goal_result)pickle.dump(dummy_model,open(f'{model_dir}/FieldGoalModels/FG_Dummy_model.pkl','wb'))#field_goals=field_goals[field_goals.elapsed_time.isna()==False]block=field_goals[(field_goals.elapsed_time.isna()==False)&(field_goals.field_goal_result=='blocked')]elapsed_time_model=RF().fit(field_goals[['kick_distance']],field_goals.elapsed_time)block_elapsed_time_model=RF().fit(block[['kick_distance']],block.elapsed_time)pickle.dump(elapsed_time_model,open(f'{model_dir}/FieldGoalModels/FG_ElapsedTime_model.pkl','wb'))pickle.dump(block_elapsed_time_model,open(f'{model_dir}/FieldGoalModels/FGBlocked_ElapsedTime_model.pkl','wb'))kickers=field_goals.kicker_player_id.unique()for kicker in kickers:    print(kicker)    temp=field_goals[field_goals.kicker_player_id==kicker]    # Add some other kicker data for added randomness    random=field_goals[field_goals.kicker_player_id!=kicker].sample(10)    temp=pd.concat([temp,random])    model=RF().fit(temp[['kick_distance']],temp.field_goal_result)    pickle.dump(model,open(f'{model_dir}/FieldGoalModels/{kicker}_FieldGoal_model.pkl','wb'))field_goals.loc[field_goals.penalty_team==field_goals.defteam,'penalty_team']='defteam'field_goals.loc[field_goals.penalty_team==field_goals.posteam,'penalty_team']='posteam'# Field Goal Penalty model=DC(strategy='stratified').fit(field_goals.qtr,field_goals.penalty)pickle.dump(model,open(f'{model_dir}/FieldGoalModels/FG_Penalty_model.pkl','wb'))# Field Goal Penalty Teamtemp=field_goals[field_goals.penalty==1]model=DC(strategy='stratified').fit(temp.qtr,temp.penalty_team)pickle.dump(model,open(f'{model_dir}/FieldGoalModels/FG_PenaltyTeam_model.pkl','wb'))# Field Goal defteam penalty typetemp=field_goals[(field_goals.penalty==1)&(field_goals.penalty_team=='defteam')]temp['penalty_string']=temp.penalty_type+' '+temp.penalty_yards.astype(str)model=DC(strategy='stratified').fit(temp.qtr,temp.penalty_string)pickle.dump(model,open(f'{model_dir}/FieldGoalModels/FG_PenaltyDefteam_model.pkl','wb'))# Field Goal posteam penalty typetemp=field_goals[(field_goals.penalty==1)&(field_goals.penalty_team=='posteam')]temp['penalty_string']=temp.penalty_type+' '+temp.penalty_yards.astype(str)model=DC(strategy='stratified').fit(temp.qtr,temp.penalty_string)pickle.dump(model,open(f'{model_dir}/FieldGoalModels/FG_PenaltyPosteam_model.pkl','wb'))